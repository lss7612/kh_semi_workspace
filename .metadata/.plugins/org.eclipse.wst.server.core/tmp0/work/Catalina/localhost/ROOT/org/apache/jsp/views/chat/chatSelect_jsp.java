/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-11-04 07:44:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.chat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import dto.common.UserInfo;
import java.util.List;
import dto.chat.ChatUserList;

public final class chatSelect_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("dto.common.UserInfo");
    _jspx_imports_classes.add("dto.chat.ChatUserList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"./errorPage.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");

    	List<ChatUserList> list = (List<ChatUserList>) request.getAttribute("userList");
    
      out.write("\r\n");
      out.write("    ");

    	UserInfo usreinfo = (UserInfo) session.getAttribute("userinfo");
    
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>대화 상대 선택하기</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-2.2.4.min.js\"></script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#chatUserList{\r\n");
      out.write("\tborder : 1px solid #ccc;\r\n");
      out.write("}\r\n");
      out.write("th,td{\r\n");
      out.write("\tborder : 3px solid #ccc;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>대화 상대 선택하기</h1>\r\n");
      out.write("<h3 style=\"color:red;\">이것은 임시 페이지 입니다.</h3>\r\n");
      out.write("<h3> 본인은 목록에서 <span style=\"color:red;\">제외</span>되어 나타납니다.</h3>\r\n");
      out.write("<hr>\r\n");
      out.write("<h3> 사 내 주 소 록</h3>\r\n");
      out.write("<form name=\"select\" action=\"/chat/room\" method=\"get\" \r\n");
      out.write("\tonsubmit=\"return check()\">\r\n");
      out.write("<table id=\"chatUserList\" >\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th>선택</th>\r\n");
      out.write("\t\t<th>이름</th>\r\n");
      out.write("\t\t<th>부서</th>\r\n");
      out.write("\t\t<th>직급</th>\r\n");
      out.write("\t\t<th>휴대번호</th>\r\n");
      out.write("\t\t<th>내선번호</th>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");
 for( ChatUserList ulist : list) { 
      out.write("\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<th><input name=\"selectUserNo\" type=\"checkbox\" value=\"");
      out.print(ulist.getUser_no() );
      out.write("\"/></th>\r\n");
      out.write("\t\t<th>");
      out.print(ulist.getUser_name() );
      out.write("</th>\r\n");
      out.write("\t\t<th>");
      out.print(ulist.getDept_name() );
      out.write("</th>\r\n");
      out.write("\t\t<th>");
      out.print(ulist.getPosition_name() );
      out.write("</th>\r\n");
      out.write("\t\t<th>");
      out.print(ulist.getCellphone_no() );
      out.write("</th>\r\n");
      out.write("\t\t");
 if(ulist.getExtension_no() == null) { 
      out.write("\r\n");
      out.write("\t\t<th> - </th>\r\n");
      out.write("\t\t");
 } else { 
      out.write("\r\n");
      out.write("\t\t<th>");
      out.print(ulist.getExtension_no() );
      out.write("</th>\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");
 } 
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("<br>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./chatPaging.jsp", out, false);
      out.write("\r\n");
      out.write("<br><br><br>\r\n");
      out.write("<div id=\"buttonTray\">\r\n");
      out.write("<input type=\"submit\" id=\"ok\" >\r\n");
      out.write("<button id=\"cancel\" onClick=\"location.href='/chathome'\" type=\"button\">취소</button>\r\n");
      out.write("</div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\t//***대화상대 선택은 현재 한명으로 제한한다. ***\r\n");
      out.write("\tfunction check(){\r\n");
      out.write("\t\t//체크박스이 체크된 수를 카운트한다.\r\n");
      out.write("\t\tvar checkCount = \r\n");
      out.write("\t\t\t$(\"input:checkbox[name=selectUserNo]:checked\").length;\r\n");
      out.write("\t\t//console.log(checkCount);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//한명 선택되었을경우 진행\r\n");
      out.write("\t\tif(checkCount == 1){\r\n");
      out.write("\t\t\t//form 태그의 action 동작\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t//한명선택 외에 선태할경우 중단\r\n");
      out.write("\t\t\talert('대화상대를 한 명 선택하세요!');\r\n");
      out.write("\t\t\t//form 태그의 action 동작 금지\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
